# -*- coding: utf-8 -*-
"""ML_Ass#2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l5LMmNnrcYAMbbvA6cRNYn3tQuaCGLjV
"""

from sklearn.datasets import load_iris
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, plot_confusion_matrix, accuracy_score
from sklearn.datasets import load_iris
from scipy import stats
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

iris_ds = load_iris()
data = iris_ds.data
labels = iris_ds.target

# Drop last 2 features
X = data[:,:2]
y = labels[:]

# Plot the likelihoods of first feature (Sepal length)
x1 = X[:, 0][y == 0]
sigma1 = np.std(x1)
mean1 = np.mean(x1)
x2 = X[:, 0][y == 1]
sigma2 = np.std(x2)
mean2 = np.mean(x2)
x3 = X[:, 0][y == 2]
sigma3 = np.std(x3)
mean3 = np.mean(x3)
x=np.linspace(1, 10, 100)
plt.plot(x, stats.norm.pdf(x, mean1, sigma1), label=iris_ds.target_names[0])
plt.plot(x, stats.norm.pdf(x, mean2, sigma2), label=iris_ds.target_names[1])
plt.plot(x, stats.norm.pdf(x, mean3, sigma3), label=iris_ds.target_names[2])
plt.xlabel('Sepal length')
plt.ylabel('Likelihood')
plt.legend()
plt.show()

# apply Na√Øve Bayes Classifier
cls = GaussianNB()
cls.fit(X, y)
y_pred = cls.predict(X)
print("accurecy: ", accuracy_score(y, y_pred))

# Plot posterior probabilities
plt.plot(cls.predict_proba(X)[:, 0], label=iris_ds.target_names[0])
plt.plot(cls.predict_proba(X)[:, 1], label=iris_ds.target_names[1])
plt.plot(cls.predict_proba(X)[:, 2], label=iris_ds.target_names[2])
plt.legend()

cls = GaussianNB()
cls.fit(X, y)
cls.theta_[:, 0] = 5.5
y_pred = cls.predict(X)
print("accurecy: ", accuracy_score(y, y_pred))
x1 = X[:, 0][y == 0]
sigma1 = np.std(x1)
mean1 = np.mean(x1)
x2 = X[:, 0][y == 1]
sigma2 = np.std(x2)
mean2 = np.mean(x2)
x3 = X[:, 0][y == 2]
sigma3 = np.std(x3)
mean3 = np.mean(x3)
x=np.linspace(1, 10, 100)
plt.plot(x, stats.norm.pdf(x, 5.5, sigma1), label=iris_ds.target_names[0])
plt.plot(x, stats.norm.pdf(x, 5.5, sigma2), label=iris_ds.target_names[1])
plt.plot(x, stats.norm.pdf(x, 5.5, sigma3), label=iris_ds.target_names[2])
plt.xlabel('Sepal length')
plt.ylabel('Likelihood')
plt.legend()
plt.show()

plt.plot(cls.predict_proba(X)[:, 0], label=iris_ds.target_names[0])
plt.plot(cls.predict_proba(X)[:, 1], label=iris_ds.target_names[1])
plt.plot(cls.predict_proba(X)[:, 2], label=iris_ds.target_names[2])
plt.legend()

cls = GaussianNB()
cls.fit(X, y)
cls.sigma_[:, 0] = 0.26
y_pred = cls.predict(X)
print("accurecy: ", accuracy_score(y, y_pred))
x1 = X[:, 0][y == 0]
sigma1 = np.std(x1)
mean1 = np.mean(x1)
x2 = X[:, 0][y == 1]
sigma2 = np.std(x2)
mean2 = np.mean(x2)
x3 = X[:, 0][y == 2]
sigma3 = np.std(x3)
mean3 = np.mean(x3)
x=np.linspace(1, 10, 100)
plt.plot(x, stats.norm.pdf(x, mean1, 0.26), label=iris_ds.target_names[0])
plt.plot(x, stats.norm.pdf(x, mean2, 0.26), label=iris_ds.target_names[1])
plt.plot(x, stats.norm.pdf(x, mean3, 0.26), label=iris_ds.target_names[2])
plt.xlabel('Sepal length')
plt.ylabel('Likelihood')
plt.legend()
plt.show()

plt.plot(cls.predict_proba(X)[:, 0], label=iris_ds.target_names[0])
plt.plot(cls.predict_proba(X)[:, 1], label=iris_ds.target_names[1])
plt.plot(cls.predict_proba(X)[:, 2], label=iris_ds.target_names[2])
plt.legend()